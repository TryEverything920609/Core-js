// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES6');
  test('Date#@@toPrimitive', function(assert){
    var TO_PRIMITIVE, toPrimitive, date, i$, x$, ref$, len$, y$, z$;
    TO_PRIMITIVE = Symbol.toPrimitive;
    toPrimitive = Date.prototype[TO_PRIMITIVE];
    assert.isFunction(toPrimitive);
    assert.arity(toPrimitive, 1);
    assert.looksNative(toPrimitive);
    assert.nonEnumerable(Object.prototype, TO_PRIMITIVE);
    date = new Date;
    assert.same(date[TO_PRIMITIVE]('string'), date.toString(), 'generic, hint "string"');
    assert.same(date[TO_PRIMITIVE]('number'), +date, 'generic, hint "number"');
    assert.same(date[TO_PRIMITIVE]('default'), date.toString(), 'generic, hint "default"');
    assert.same(toPrimitive.call(Object(2), 'string'), '2', 'generic, hint "string"');
    assert.same(toPrimitive.call(Object(2), 'number'), 2, 'generic, hint "number"');
    assert.same(toPrimitive.call(Object(2), 'default'), '2', 'generic, hint "default"');
    for (i$ = 0, len$ = (ref$ = [
      void 8, '', 'foo', {
        toString: fn$
      }
    ]).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      assert.throws(fn1$, TypeError, "throws on " + x$ + " as a hint");
    }
    for (i$ = 0, len$ = (ref$ = [1, false, 'string']).length; i$ < len$; ++i$) {
      y$ = ref$[i$];
      assert.throws(fn2$, TypeError, "throws on " + y$ + " as `this`");
    }
    if (STRICT) {
      for (i$ = 0, len$ = (ref$ = [null, void 8]).length; i$ < len$; ++i$) {
        z$ = ref$[i$];
        assert.throws(fn3$, TypeError, "throws on " + z$ + " as `this`");
      }
    }
    function fn$(){
      return 'string';
    }
    function fn1$(){
      new Date()[TO_PRIMITIVE](x$);
    }
    function fn2$(){
      toPrimitive.call(y$, 'string');
    }
    function fn3$(){
      toPrimitive.call(z$, 'string');
    }
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  if (DESCRIPTORS) {
    test('Object#__defineGetter__', function(assert){
      var __defineGetter__, O, i$, x$, ref$, len$;
      __defineGetter__ = Object.prototype.__defineGetter__;
      assert.isFunction(__defineGetter__);
      assert.arity(__defineGetter__, 2);
      assert.name(__defineGetter__, '__defineGetter__');
      assert.looksNative(__defineGetter__);
      assert.nonEnumerable(Object.prototype, '__defineGetter__');
      O = {};
      assert.same(O.__defineGetter__('key', function(){
        return 42;
      }), void 8, 'void');
      assert.same(O.key, 42, 'works');
      O.__defineSetter__('key', function(){
        this.foo = 43;
      });
      O.key = 44;
      assert.ok(O.key === 42 && O.foo === 43, 'works with setter');
      if (STRICT) {
        for (i$ = 0, len$ = (ref$ = [null, void 8]).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          assert.throws(fn$, TypeError, "Throws on " + x$ + " as `this`");
        }
      }
      function fn$(){
        __defineGetter__.call(x$, 1, function(){});
      }
    });
  }
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  if (DESCRIPTORS) {
    test('Object#__defineSetter__', function(assert){
      var __defineSetter__, O, i$, x$, ref$, len$;
      __defineSetter__ = Object.prototype.__defineSetter__;
      assert.isFunction(__defineSetter__);
      assert.arity(__defineSetter__, 2);
      assert.name(__defineSetter__, '__defineSetter__');
      assert.looksNative(__defineSetter__);
      assert.nonEnumerable(Object.prototype, '__defineSetter__');
      O = {};
      assert.same(O.__defineSetter__('key', function(){
        this.foo = 43;
      }), void 8, 'void');
      O.key = 44;
      assert.same(O.foo, 43, 'works');
      O = {};
      O.__defineSetter__('key', function(){
        this.foo = 43;
      });
      O.__defineGetter__('key', function(){
        return 42;
      });
      O.key = 44;
      assert.ok(O.key === 42 && O.foo === 43, 'works with getter');
      if (STRICT) {
        for (i$ = 0, len$ = (ref$ = [null, void 8]).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          assert.throws(fn$, TypeError, "Throws on " + x$ + " as `this`");
        }
      }
      function fn$(){
        __defineSetter__.call(x$, 1, function(){});
      }
    });
  }
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  if (DESCRIPTORS) {
    test('Object#__lookupGetter__', function(assert){
      var __lookupGetter__, create, O, F, i$, x$, ref$, len$;
      __lookupGetter__ = Object.prototype.__lookupGetter__;
      create = Object.create;
      assert.isFunction(__lookupGetter__);
      assert.arity(__lookupGetter__, 1);
      assert.name(__lookupGetter__, '__lookupGetter__');
      assert.looksNative(__lookupGetter__);
      assert.nonEnumerable(Object.prototype, '__lookupGetter__');
      assert.same({}.__lookupGetter__('key'), void 8, 'empty object');
      assert.same({
        key: 42
      }.__lookupGetter__('key'), void 8, 'data descriptor');
      O = {};
      F = function(){};
      O.__defineGetter__('key', F);
      assert.same(O.__lookupGetter__('key'), F, 'own getter');
      assert.same(create(O).__lookupGetter__('key'), F, 'proto getter');
      assert.same(create(O).__lookupGetter__('foo'), void 8, 'empty proto');
      if (STRICT) {
        for (i$ = 0, len$ = (ref$ = [null, void 8]).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          assert.throws(fn$, TypeError, "Throws on " + x$ + " as `this`");
        }
      }
      function fn$(){
        __lookupGetter__.call(x$, 1);
      }
    });
  }
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  if (DESCRIPTORS) {
    test('Object#__lookupSetter__', function(assert){
      var __lookupSetter__, create, O, F, i$, x$, ref$, len$;
      __lookupSetter__ = Object.prototype.__lookupSetter__;
      create = Object.create;
      assert.isFunction(__lookupSetter__);
      assert.arity(__lookupSetter__, 1);
      assert.name(__lookupSetter__, '__lookupSetter__');
      assert.looksNative(__lookupSetter__);
      assert.nonEnumerable(Object.prototype, '__lookupSetter__');
      assert.same({}.__lookupSetter__('key'), void 8, 'empty object');
      assert.same({
        key: 42
      }.__lookupSetter__('key'), void 8, 'data descriptor');
      O = {};
      F = function(){};
      O.__defineSetter__('key', F);
      assert.same(O.__lookupSetter__('key'), F, 'own setter');
      assert.same(create(O).__lookupSetter__('key'), F, 'proto setter');
      assert.same(create(O).__lookupSetter__('foo'), void 8, 'empty proto');
      if (STRICT) {
        for (i$ = 0, len$ = (ref$ = [null, void 8]).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          assert.throws(fn$, TypeError, "Throws on " + x$ + " as `this`");
        }
      }
      function fn$(){
        __lookupSetter__.call(x$, 1);
      }
    });
  }
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('String#matchAll', function(assert){
    var matchAll, assign, i$, x$, ref$, len$, iter, y$, z$;
    matchAll = String.prototype.matchAll;
    assign = Object.assign;
    assert.isFunction(matchAll);
    assert.arity(matchAll, 1);
    assert.name(matchAll, 'matchAll');
    assert.looksNative(matchAll);
    assert.nonEnumerable(String.prototype, 'matchAll');
    for (i$ = 0, len$ = (ref$ = [
      'aabc', {
        toString: fn$
      }
    ]).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      iter = matchAll.call(x$, /[ac]/);
      assert.isIterator(iter);
      assert.isIterable(iter);
      assert.deepEqual(iter.next(), {
        value: assign(['a'], {
          input: 'aabc',
          index: 0
        }),
        done: false
      });
      assert.deepEqual(iter.next(), {
        value: assign(['a'], {
          input: 'aabc',
          index: 1
        }),
        done: false
      });
      assert.deepEqual(iter.next(), {
        value: assign(['c'], {
          input: 'aabc',
          index: 3
        }),
        done: false
      });
      assert.deepEqual(iter.next(), {
        value: null,
        done: true
      });
    }
    iter = '1111a2b3cccc'.matchAll(/(\d)(\D)/);
    assert.isIterator(iter);
    assert.isIterable(iter);
    assert.deepEqual(iter.next(), {
      value: assign(['1a', '1', 'a'], {
        input: '1111a2b3cccc',
        index: 3
      }),
      done: false
    });
    assert.deepEqual(iter.next(), {
      value: assign(['2b', '2', 'b'], {
        input: '1111a2b3cccc',
        index: 5
      }),
      done: false
    });
    assert.deepEqual(iter.next(), {
      value: assign(['3c', '3', 'c'], {
        input: '1111a2b3cccc',
        index: 7
      }),
      done: false
    });
    assert.deepEqual(iter.next(), {
      value: null,
      done: true
    });
    for (i$ = 0, len$ = (ref$ = [null, void 8, 'qwe', NaN, 42, new Date(), {}, []]).length; i$ < len$; ++i$) {
      y$ = ref$[i$];
      assert.throws(fn1$, TypeError, "Throws on " + y$ + " as first arguments");
    }
    if (STRICT) {
      for (i$ = 0, len$ = (ref$ = [null, void 8]).length; i$ < len$; ++i$) {
        z$ = ref$[i$];
        assert.throws(fn2$, TypeError, "Throws on " + z$ + " as `this`");
      }
    }
    function fn$(){
      return 'aabc';
    }
    function fn1$(){
      ''.matchAll(y$);
    }
    function fn2$(){
      matchAll.call(z$, /./);
    }
  });
}).call(this);
