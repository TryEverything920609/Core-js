// Generated by LiveScript 1.4.0
(function(){
  'use strict';
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Observable', function(assert){
    var obsevable;
    assert.isFunction(Observable);
    assert.arity(Observable, 1);
    assert.name(Observable, 'Observable');
    assert.looksNative(Observable);
    assert.throws(function(){
      Observable(function(){});
    }, 'throws w/o `new`');
    obsevable = new Observable(function(subscriptionObserver){
      var next, error, complete;
      assert.same(typeof subscriptionObserver, 'object', 'Subscription observer is object');
      assert.same(subscriptionObserver.constructor, Object);
      next = subscriptionObserver.next, error = subscriptionObserver.error, complete = subscriptionObserver.complete;
      assert.isFunction(next);
      assert.isFunction(error);
      assert.isFunction(complete);
      assert.name(next, 'next');
      assert.name(error, 'error');
      assert.name(complete, 'complete');
      assert.arity(next, 1);
      assert.arity(error, 1);
      assert.arity(complete, 1);
      assert.looksNative(next);
      assert.looksNative(error);
      assert.looksNative(complete);
      assert.same(this, function(){
        return this;
      }(), 'correct executor context');
    });
    obsevable.subscribe({});
    assert.ok(obsevable instanceof Observable);
  });
  test('Observable#subscribe', function(assert){
    var subscription;
    assert.isFunction(Observable.prototype.subscribe);
    assert.arity(Observable.prototype.subscribe, 1);
    assert.name(Observable.prototype.subscribe, 'subscribe');
    assert.looksNative(Observable.prototype.subscribe);
    subscription = new Observable(function(){}).subscribe({});
    assert.same(typeof subscription, 'object', 'Subscription is object');
    assert.same(subscription.constructor, Object);
    assert.isFunction(subscription.unsubscribe);
    assert.arity(subscription.unsubscribe, 0);
    assert.name(subscription.unsubscribe, 'unsubscribe');
    assert.looksNative(subscription.unsubscribe);
  });
  test('Observable#forEach', function(assert){
    assert.isFunction(Observable.prototype.forEach);
    assert.arity(Observable.prototype.forEach, 1);
    assert.name(Observable.prototype.forEach, 'forEach');
    assert.looksNative(Observable.prototype.forEach);
    assert.ok(new Observable(function(){}).forEach({}) instanceof Promise, 'returns Promise');
  });
  test('Observable#constructor', function(assert){
    assert.same(Observable.prototype.constructor, Observable);
  });
  test('Observable#@@observable', function(assert){
    var observable;
    assert.isFunction(Observable.prototype[Symbol.observable]);
    observable = new Observable(function(){});
    assert.same(observable[Symbol.observable](), observable);
  });
  test('Observable.of', function(assert){
    assert.isFunction(Observable.of);
    assert.arity(Observable.of, 0);
    assert.name(Observable.of, 'of');
    assert.looksNative(Observable.of);
  });
  test('Observable.from', function(assert){
    assert.isFunction(Observable.from);
    assert.arity(Observable.from, 1);
    assert.name(Observable.from, 'from');
    assert.looksNative(Observable.from);
  });
}).call(this);
