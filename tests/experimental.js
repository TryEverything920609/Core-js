// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES5');
  test('Array#sort', function(assert){
    assert.isFunction(Array.prototype.sort);
    assert.arity(Array.prototype.sort, 1);
    assert.name(Array.prototype.sort, 'sort');
    assert.looksNative(Array.prototype.sort);
    assert.looksNative(Array.prototype.sort);
    assert.ok(!!(function(){
      try {
        return [1, 2, 3].sort(void 8);
      } catch (e$) {}
    }()), 'works with undefined');
    assert.throws(function(){
      [1, 2, 3].sort(null);
    }, 'throws on null');
    assert.throws(function(){
      [1, 2, 3].sort({});
    }, 'throws on {}');
    if (STRICT) {
      assert.throws(function(){
        return Array.prototype.sort.call(null);
      }, TypeError, 'ToObject(this)');
      assert.throws(function(){
        return Array.prototype.sort.call(void 8);
      }, TypeError, 'ToObject(this)');
    }
    if (NATIVE) {
      assert.ok(!!(function(){
        try {
          return Array.prototype.sort.call({
            0: 1,
            1: 3,
            2: 2,
            length: -1
          }, function(){
            throw 42;
          });
        } catch (e$) {}
      }()), 'ToLength(? Get(obj, "length"))');
    }
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.defineMetadata', function(assert){
    var defineMetadata;
    defineMetadata = Reflect.defineMetadata;
    assert.isFunction(defineMetadata);
    assert.arity(defineMetadata, 4);
    assert.name(defineMetadata, 'defineMetadata');
    assert.looksNative(defineMetadata);
    assert.throws(function(){
      defineMetadata('key', 'value', void 8, void 8);
    }, TypeError);
    assert.same(defineMetadata('key', 'value', {}, void 8), void 8);
    assert.same(defineMetadata('key', 'value', {}, 'name'), void 8);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.deleteMetadata', function(assert){
    var defineMetadata, hasOwnMetadata, deleteMetadata, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, hasOwnMetadata = Reflect.hasOwnMetadata, deleteMetadata = Reflect.deleteMetadata;
    create = Object.create;
    assert.isFunction(deleteMetadata);
    assert.arity(deleteMetadata, 2);
    assert.name(deleteMetadata, 'deleteMetadata');
    assert.looksNative(deleteMetadata);
    assert.throws(function(){
      deleteMetadata('key', void 8, void 8);
    }, TypeError);
    assert.same(deleteMetadata('key', {}, void 8), false);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.same(deleteMetadata('key', obj, void 8), true);
    prototype = {};
    defineMetadata('key', 'value', prototype, void 8);
    assert.same(deleteMetadata('key', create(prototype), void 8), false);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    deleteMetadata('key', obj, void 8);
    assert.same(hasOwnMetadata("key", obj, undefined), false);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.getMetadataKeys', function(assert){
    var defineMetadata, getMetadataKeys, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, getMetadataKeys = Reflect.getMetadataKeys;
    create = Object.create;
    assert.isFunction(getMetadataKeys);
    assert.arity(getMetadataKeys, 1);
    assert.name(getMetadataKeys, 'getMetadataKeys');
    assert.looksNative(getMetadataKeys);
    assert.throws(function(){
      getMetadataKeys(void 8, void 8);
    }, TypeError);
    assert.deepEqual(getMetadataKeys({}, void 8), []);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.deepEqual(getMetadataKeys(obj, void 8), ['key']);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, void 8);
    assert.deepEqual(getMetadataKeys(obj, void 8), ['key']);
    obj = {};
    defineMetadata('key0', 'value', obj, void 8);
    defineMetadata('key1', 'value', obj, void 8);
    assert.deepEqual(getMetadataKeys(obj, void 8), ['key0', 'key1']);
    obj = {};
    defineMetadata('key0', 'value', obj, void 8);
    defineMetadata('key1', 'value', obj, void 8);
    defineMetadata('key0', 'value', obj, void 8);
    assert.deepEqual(getMetadataKeys(obj, void 8), ['key0', 'key1']);
    prototype = {};
    defineMetadata('key2', 'value', prototype, void 8);
    obj = create(prototype);
    defineMetadata('key0', 'value', obj, void 8);
    defineMetadata('key1', 'value', obj, void 8);
    assert.deepEqual(getMetadataKeys(obj, void 8), ['key0', 'key1', 'key2']);
    obj = {};
    assert.deepEqual(getMetadataKeys({}, 'name'), []);
    obj = {};
    defineMetadata('key', 'value', obj, 'name');
    assert.deepEqual(getMetadataKeys(obj, 'name'), ['key']);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, 'name');
    assert.deepEqual(getMetadataKeys(obj, 'name'), ['key']);
    obj = {};
    defineMetadata('key0', 'value', obj, 'name');
    defineMetadata('key1', 'value', obj, 'name');
    defineMetadata('key0', 'value', obj, 'name');
    assert.deepEqual(getMetadataKeys(obj, 'name'), ['key0', 'key1']);
    prototype = {};
    defineMetadata('key2', 'value', prototype, 'name');
    obj = create(prototype);
    defineMetadata('key0', 'value', obj, 'name');
    defineMetadata('key1', 'value', obj, 'name');
    assert.deepEqual(getMetadataKeys(obj, 'name'), ['key0', 'key1', 'key2']);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.getMetadata', function(assert){
    var defineMetadata, getMetadata, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, getMetadata = Reflect.getMetadata;
    create = Object.create;
    assert.isFunction(getMetadata);
    assert.arity(getMetadata, 2);
    assert.name(getMetadata, 'getMetadata');
    assert.looksNative(getMetadata);
    assert.throws(function(){
      getMetadata('key', void 8, void 8);
    }, TypeError);
    assert.same(getMetadata('key', {}, void 8), void 8);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.same(getMetadata('key', obj, void 8), 'value');
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, void 8);
    assert.same(getMetadata('key', obj, void 8), 'value');
    assert.same(getMetadata('key', {}, 'name'), void 8);
    obj = {};
    defineMetadata('key', 'value', obj, 'name');
    assert.same(getMetadata('key', obj, 'name'), 'value');
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, 'name');
    assert.same(getMetadata('key', obj, 'name'), 'value');
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.getOwnMetadata', function(assert){
    var defineMetadata, getOwnMetadata, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, getOwnMetadata = Reflect.getOwnMetadata;
    create = Object.create;
    assert.isFunction(getOwnMetadata);
    assert.arity(getOwnMetadata, 2);
    assert.name(getOwnMetadata, 'getOwnMetadata');
    assert.looksNative(getOwnMetadata);
    assert.throws(function(){
      getOwnMetadata('key', void 8, void 8);
    }, TypeError);
    assert.same(getOwnMetadata('key', {}, void 8), void 8);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.same(getOwnMetadata('key', obj, void 8), 'value');
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, void 8);
    assert.same(getOwnMetadata('key', obj, void 8), void 8);
    assert.same(getOwnMetadata('key', {}, 'name'), void 8);
    obj = {};
    defineMetadata('key', 'value', obj, 'name');
    assert.same(getOwnMetadata('key', obj, 'name'), 'value');
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, 'name');
    assert.same(getOwnMetadata('key', obj, 'name'), void 8);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.getOwnMetadataKeys', function(assert){
    var defineMetadata, getOwnMetadataKeys, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, getOwnMetadataKeys = Reflect.getOwnMetadataKeys;
    create = Object.create;
    assert.isFunction(getOwnMetadataKeys);
    assert.arity(getOwnMetadataKeys, 1);
    assert.name(getOwnMetadataKeys, 'getOwnMetadataKeys');
    assert.looksNative(getOwnMetadataKeys);
    assert.throws(function(){
      getOwnMetadataKeys(void 8, void 8);
    }, TypeError);
    assert.deepEqual(getOwnMetadataKeys({}, void 8), []);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.deepEqual(getOwnMetadataKeys(obj, void 8), ['key']);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, void 8);
    assert.deepEqual(getOwnMetadataKeys(obj, void 8), []);
    obj = {};
    defineMetadata('key0', 'value', obj, void 8);
    defineMetadata('key1', 'value', obj, void 8);
    assert.deepEqual(getOwnMetadataKeys(obj, void 8), ['key0', 'key1']);
    obj = {};
    defineMetadata('key0', 'value', obj, void 8);
    defineMetadata('key1', 'value', obj, void 8);
    defineMetadata('key0', 'value', obj, void 8);
    assert.deepEqual(getOwnMetadataKeys(obj, void 8), ['key0', 'key1']);
    prototype = {};
    defineMetadata('key2', 'value', prototype, void 8);
    obj = create(prototype);
    defineMetadata('key0', 'value', obj, void 8);
    defineMetadata('key1', 'value', obj, void 8);
    assert.deepEqual(getOwnMetadataKeys(obj, void 8), ['key0', 'key1']);
    obj = {};
    assert.deepEqual(getOwnMetadataKeys({}, 'name'), []);
    obj = {};
    defineMetadata('key', 'value', obj, 'name');
    assert.deepEqual(getOwnMetadataKeys(obj, 'name'), ['key']);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, 'name');
    assert.deepEqual(getOwnMetadataKeys(obj, 'name'), []);
    obj = {};
    defineMetadata('key0', 'value', obj, 'name');
    defineMetadata('key1', 'value', obj, 'name');
    defineMetadata('key0', 'value', obj, 'name');
    assert.deepEqual(getOwnMetadataKeys(obj, 'name'), ['key0', 'key1']);
    prototype = {};
    defineMetadata('key2', 'value', prototype, 'name');
    obj = create(prototype);
    defineMetadata('key0', 'value', obj, 'name');
    defineMetadata('key1', 'value', obj, 'name');
    assert.deepEqual(getOwnMetadataKeys(obj, 'name'), ['key0', 'key1']);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.hasMetadata', function(assert){
    var defineMetadata, hasMetadata, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, hasMetadata = Reflect.hasMetadata;
    create = Object.create;
    assert.isFunction(hasMetadata);
    assert.arity(hasMetadata, 2);
    assert.name(hasMetadata, 'hasMetadata');
    assert.looksNative(hasMetadata);
    assert.throws(function(){
      hasMetadata('key', void 8, void 8);
    }, TypeError);
    assert.same(hasMetadata('key', {}, void 8), false);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.same(hasMetadata('key', obj, void 8), true);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, void 8);
    assert.same(hasMetadata('key', obj, void 8), true);
    assert.same(hasMetadata('key', {}, 'name'), false);
    obj = {};
    defineMetadata('key', 'value', obj, 'name');
    assert.same(hasMetadata('key', obj, 'name'), true);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, 'name');
    assert.same(hasMetadata('key', obj, 'name'), true);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.hasOwnMetadata', function(assert){
    var defineMetadata, hasOwnMetadata, create, obj, prototype;
    defineMetadata = Reflect.defineMetadata, hasOwnMetadata = Reflect.hasOwnMetadata;
    create = Object.create;
    assert.isFunction(hasOwnMetadata);
    assert.arity(hasOwnMetadata, 2);
    assert.name(hasOwnMetadata, 'hasOwnMetadata');
    assert.looksNative(hasOwnMetadata);
    assert.throws(function(){
      hasOwnMetadata('key', void 8, void 8);
    }, TypeError);
    assert.same(hasOwnMetadata('key', {}, void 8), false);
    obj = {};
    defineMetadata('key', 'value', obj, void 8);
    assert.same(hasOwnMetadata('key', obj, void 8), true);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, void 8);
    assert.same(hasOwnMetadata('key', obj, void 8), false);
    assert.same(hasOwnMetadata('key', {}, 'name'), false);
    obj = {};
    defineMetadata('key', 'value', obj, 'name');
    assert.same(hasOwnMetadata('key', obj, 'name'), true);
    prototype = {};
    obj = create(prototype);
    defineMetadata('key', 'value', prototype, 'name');
    assert.same(hasOwnMetadata('key', obj, 'name'), false);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Reflect.metadata', function(assert){
    var metadata, hasOwnMetadata, decorator, target;
    metadata = Reflect.metadata, hasOwnMetadata = Reflect.hasOwnMetadata;
    assert.isFunction(metadata);
    assert.arity(metadata, 2);
    assert.name(metadata, 'metadata');
    assert.looksNative(metadata);
    assert.isFunction(metadata('key', 'value'));
    decorator = metadata('key', 'value');
    assert.throws(function(){
      decorator(void 8, 'name');
    }, TypeError);
    assert.throws(function(){
      decorator({}, void 8);
    }, TypeError);
    target = function(){};
    decorator(target);
    assert.same(hasOwnMetadata('key', target, void 8), true);
    target = {};
    decorator(target, 'name');
    assert.same(hasOwnMetadata('key', target, 'name'), true);
  });
}).call(this);
