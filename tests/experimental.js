// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Object.enumerableEntries ', function(assert){
    var enumerableEntries, create, O;
    enumerableEntries = Object.enumerableEntries, create = Object.create;
    assert.isFunction(enumerableEntries);
    assert.arity(enumerableEntries, 1);
    assert.name(enumerableEntries, 'enumerableEntries');
    assert.looksNative(enumerableEntries);
    assert.nonEnumerable(Object, 'enumerableEntries');
    O = create({
      a: 1
    }, {
      c: {
        value: 3
      }
    });
    O.b = 2;
    assert.deepEqual(enumerableEntries(O).sort(function(x, y){
      return x[1] - y[1];
    }), [['a', 1], ['b', 2]]);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Object.enumerableKeys', function(assert){
    var enumerableKeys, create, O;
    enumerableKeys = Object.enumerableKeys, create = Object.create;
    assert.isFunction(enumerableKeys);
    assert.arity(enumerableKeys, 1);
    assert.name(enumerableKeys, 'enumerableKeys');
    assert.looksNative(enumerableKeys);
    assert.nonEnumerable(Object, 'enumerableKeys');
    O = create({
      a: 1
    }, {
      c: {
        value: 3
      }
    });
    O.b = 2;
    assert.deepEqual(enumerableKeys(O).sort(), ['a', 'b']);
  });
}).call(this);

// Generated by LiveScript 1.4.0
(function(){
  var module, test;
  module = QUnit.module, test = QUnit.test;
  module('ES7');
  test('Object.enumerableValues ', function(assert){
    var enumerableValues, create, O;
    enumerableValues = Object.enumerableValues, create = Object.create;
    assert.isFunction(enumerableValues);
    assert.arity(enumerableValues, 1);
    assert.name(enumerableValues, 'enumerableValues');
    assert.looksNative(enumerableValues);
    assert.nonEnumerable(Object, 'enumerableValues');
    O = create({
      a: 1
    }, {
      c: {
        value: 3
      }
    });
    O.b = 2;
    assert.deepEqual(enumerableValues(O).sort(), [1, 2]);
  });
}).call(this);
