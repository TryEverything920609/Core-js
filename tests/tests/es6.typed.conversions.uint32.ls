{module, test} = QUnit
module \ES6
DESCRIPTORS and test 'Uint32 conversions', !(assert)~>
  data = [
    [0,0,[0,0,0,0]]
    [-0,0,[0,0,0,0]]
    [1,1,[1,0,0,0]]
    [-1,4294967295,[255,255,255,255]]
    [1.1,1,[1,0,0,0]]
    [-1.1,4294967295,[255,255,255,255]]
    [1.9,1,[1,0,0,0]]
    [-1.9,4294967295,[255,255,255,255]]
    [127,127,[127,0,0,0]]
    [-127,4294967169,[129,255,255,255]]
    [128,128,[128,0,0,0]]
    [-128,4294967168,[128,255,255,255]]
    [255,255,[255,0,0,0]]
    [-255,4294967041,[1,255,255,255]]
    [255.1,255,[255,0,0,0]]
    [255.9,255,[255,0,0,0]]
    [256,256,[0,1,0,0]]
    [32767,32767,[255,127,0,0]]
    [-32767,4294934529,[1,128,255,255]]
    [32768,32768,[0,128,0,0]]
    [-32768,4294934528,[0,128,255,255]]
    [65535,65535,[255,255,0,0]]
    [65536,65536,[0,0,1,0]]
    [65537,65537,[1,0,1,0]]
    [65536.54321,65536,[0,0,1,0]]
    [-65536.54321,4294901760,[0,0,255,255]]
    [2147483647,2147483647,[255,255,255,127]]
    [-2147483647,2147483649,[1,0,0,128]]
    [2147483648,2147483648,[0,0,0,128]]
    [-2147483648,2147483648,[0,0,0,128]]
    [2147483649,2147483649,[1,0,0,128]]
    [-2147483649,2147483647,[255,255,255,127]]
    [4294967295,4294967295,[255,255,255,255]]
    [4294967296,0,[0,0,0,0]]
    [4294967297,1,[1,0,0,0]]
    [Infinity,0,[0,0,0,0]]
    [-Infinity,0,[0,0,0,0]]
    [-1.7976931348623157e+308,0,[0,0,0,0]]
    [1.7976931348623157e+308,0,[0,0,0,0]]
    [5e-324,0,[0,0,0,0]]
    [-5e-324,0,[0,0,0,0]]
    [NaN,0,[0,0,0,0]]
  ]

  KEY   = \setUint32
  typed = new Uint32Array 1
  uint8 = new Uint8Array typed.buffer
  view  = new DataView typed.buffer

  z = -> if it is 0 and 1 / it is -Infinity => '-0' else it
  
  for [value, conversion, little] in data
    
    big = little.slice!reverse!
    rep = if LITTLE_ENDIAN => little else big

    typed[0] = value
    assert.same typed[0], conversion, "#{z value} -> #{z conversion}"
    assert.arrayEqual uint8, rep, "#{z value} -> #rep"

    view[KEY] 0, value
    assert.arrayEqual uint8, big, "view.#KEY(0, #{z value}) -> #big"
    view[KEY] 0, value, no
    assert.arrayEqual uint8, big, "view.#KEY(0, #{z value}, false) -> #big"
    view[KEY] 0, value, on
    assert.arrayEqual uint8, little, "view.#KEY(0, #{z value}, true) -> #little"