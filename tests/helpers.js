// Generated by LiveScript 1.3.1
(function(){
  QUnit.assert.arity = function(fn, length, message){
    this.push(fn.length === length, fn.length, length, message || "arity is " + length);
  };
}).call(this);

// Generated by LiveScript 1.3.1
(function(){
  QUnit.assert.epsilon = function(a, b, E, message){
    this.push(Math.abs(a - b) <= (E != null ? E : 1e-11), a, b, message);
  };
}).call(this);

// Generated by LiveScript 1.3.1
(function(){
  var toString$ = {}.toString;
  QUnit.assert.isFunction = function(fn, message){
    this.push(typeof fn === 'function' || toString$.call(fn).slice(8, -1) === 'Function', false, true, message || 'is function');
  };
}).call(this);

// Generated by LiveScript 1.3.1
(function(){
  QUnit.assert.looksNative = function(fn, message){
    this.push(/native code/.test(Function.prototype.toString.call(fn)), false, true, message || 'looks native');
  };
}).call(this);

// Generated by LiveScript 1.3.1
(function(){
  QUnit.assert.name = function(fn, name, message){
    this.push(fn.name === name, fn.name, name, message || "name is '" + name + "'");
  };
}).call(this);

// Generated by LiveScript 1.3.1
(function(){
  QUnit.assert.same = function(a, b, message){
    this.push(a === b
      ? a !== 0 || 1 / a === 1 / b
      : a != a && b != b, a, b, message);
  };
}).call(this);
